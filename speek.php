<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru" lang="ru">
 <head> 
 	<title>Умный Дом</title>
 	 <script language="javascript" type="text/javascript"> 
 	 /* Создание нового объекта XMLHttpRequest для общения с Web-сервером */ var xmlHttp = false; /*@cc_on @*/ /*@if (@_jscript_version >= 5) try {   xmlHttp = new ActiveXObject("Msxml2.XMLHTTP"); } catch (e) {   try {     xmlHttp = new ActiveXObject("Microsoft.XMLHTTP");   } catch (e2) {     xmlHttp = false;   } } @end @*/ 
 	  if (!xmlHttp && typeof XMLHttpRequest != 'undefined') {   xmlHttp = new XMLHttpRequest(); } </script>
 	   <style>   * {     font-family: Verdana, Arial, sans-serif;     font-size: 20px;   }   a:link {     color:#000;     text-decoration: none;   }   a:visited {     color:#000;   }   a:hover {     color:#33F;   }   body {       text-align: center;   }   .button {     background: -webkit-linear-gradient(top,#008dfd 0,#0370ea 100%);     border: 1px solid #076bd2;     border-radius: 3px;     color: #fff;     display: none;     font-size: 13px;     font-weight: bold;     line-height: 1.3;     padding: 8px 25px;     text-align: center;     text-shadow: 1px 1px 1px #076bd2;     letter-spacing: normal;   }      .final {     color: black;     padding-right: 3px;   }   .interim {     color: gray;   }   .info {     font-size: 14px;     text-align: center;     color: #777;     display: none;   }      .sidebyside {     display: inline-block;     width: 45%;     min-height: 40px;     text-align: left;     vertical-align: top;   }   #headline {     font-size: 40px;     font-weight: 300;   }   #info {     font-size: 20px;     text-align: center;     color: #777;     visibility: hidden;   }   #results {     font-size: 14px;     font-weight: bold;     border: 1px solid #ddd;     padding: 15px;     text-align: left;     min-height: 30px;     width: 500px;     margin: 0 auto;   }   #start_button {     border: 0;     padding: 0;     background: url(images/mic.gif);     width: 50px;     height: 50px;     cursor: pointer;     vertical-align: top;   }  #info_speak_now, #info_no_speech, #info_no_microphone, #info_upgrade {     display: none; }    </style> <meta charset="UTF-8" /> </head> <body> <div id="messages"> 	 <input type="button" id="start_button" onclick="startButton(event);" />
 	    	<!-- сообщения на разные случаи --> 
 	    		<p id="info_start">Кликни на микрофон чтобы начать раздавать команды.</p> 	<p id="info_speak_now">Командуй!</p> 	<p id="info_no_speech">Голос не обнаружен.</p> 	<p id="info_no_microphone">Микрофон не найден.</p> 	<p id="info_upgrade">Твой браузер не поддерживает Web Speech API.</p> </div> <div id="results">   <span id="final_span" class="final"></span> </div> <script> var start_button = document.getElementById('start_button'), 	recognizing = false, // флаг идет ли распознование 
 	    			final_transcript = '';  
 	    			// проверяем поддержку speach api 
 	    			if (!('webkitSpeechRecognition' in window)) { 	 	start_button.style.display = "none"; 	showInfo("info_upgrade"); 	 }
 	    			 else { 
 	    			 	/* инициализируем api */    /* создаем объект 	*/ 
 	    			 	 var recognition = new webkitSpeechRecognition();    /* базовые настройки объекта */    recognition.lang = 'ru'; 
 	    			 	 // язык, который будет распозноваться. Значение - lang code
 	    			 	   recognition.continuous = true; // не хотим чтобы когда пользователь прикратил говорить, распознование закончилось    /* метод вызывается когда начинается распознование */  recognition.onstart = function() { 	      recognizing = true; 	     showInfo('info_speak_now'); // меняем инфо текст     start_button.style.background = 'url(images/mic-animate.gif)'; // меняем вид кнопки        };      /* обработчик ошибок */   recognition.onerror = function(event) {     if (event.error == 'no-speech') {       start_button.style.background = 'url(images/mic.gif)';       showInfo('info_no_speech');     }     if (event.error == 'audio-capture') {       start_button.style.background = 'url(images/mic.gif)';       showInfo('info_no_microphone');     }   };      /* метод вызывается когда распознование закончено */   recognition.onend = function() {  	recognizing = false;  	recognition.start(); 	start_button.style.background = 'url(images/mic.gif)'; 	showInfo('info_start');    };      /*    	метод вызывается после каждой сказанной фразы. Параметра event используем атрибуты: 	- resultIndex - нижний индекс в результирующем массиве 	- results - массив всех результатов в текущей сессии  */   recognition.onresult = function(event) { 	      	  /*  	  	обход результирующего массива 	  */ 	  for (var i = event.resultIndex; i < event.results.length; ++i) { 		 		/* если фраза финальная (уже откорректированная) сохраняем в конечный результат */       	if (event.results[i].isFinal) {         	final_transcript += event.results[i][0].transcript.toLowerCase();         	      	 }       }         final_span.innerHTML = final_transcript; 	 var newText2 = final_transcript.replace(/(^\s+|\s+$)/g,''); 	 var url = "/voice_search.php?q=" + encodeURI(newText2);   	 xmlHttp.open("GET", url, true);   	 xmlHttp.send(null); 	 	 final_transcript = '';	// очищаем рапознанный текст 	   };   }  /* показ нужного сообщения */ function showInfo(id) { 		 	var messages = document.querySelectorAll('p'); 	 	for(i=0; i<messages.length; i++) messages[i].style.display = 'none';  	document.getElementById(id).style.display = 'block'; }   /* обработчик клика по микрофону */ function startButton(event) {    if (recognizing) { // если запись уже идет, тогда останавливаем     recognition.stop(); 	document.getElementById('final_span').innerHTML = '';     return;   }     recognition.start();    } </script> </body> </html> 